generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InfractionType {
  Warn
  Mute
  Kick
  Ban
  Unmute
  Unban
}

model Guild {
  id                        String       @id
  infractionModeratorPublic Boolean      @default(false)
  notifyInfractionChange    Boolean      @default(true)
  appealAllowed             Boolean      @default(false)
  appealAlertWebhookId      String?
  appealQuestions           String[]     @default(["Reason for appeal."])
  appealDisregardAfter      BigInt       @default(2592000000)
  appealBlacklist           String[]
  modLogWebhookId           String?
  messageLogWebhookId       String?
  messageLogIgnoredChannels String[]
  infoWarn                  String?
  infoMute                  String?
  infoKick                  String?
  infoBan                   String?
  defaultWarnDuration       BigInt       @default(0)
  defaultMuteDuration       BigInt       @default(0)
  defaultBanDuration        BigInt       @default(0)
  autoMod                   Json[]       @default(["{\"toggle\": false, \"duration\": \"0\", \"punishment\": null, \"immuneRoles\": [], \"immuneChannels\": []}", "{\"ruleId\": \"\", \"toggle\": false, \"duration\": \"0\", \"punishment\": null}", "{\"toggle\": false, \"duration\": \"0\", \"punishment\": null, \"immuneRoles\": [], \"immuneChannels\": []}", "{\"ruleId\": \"\", \"toggle\": false, \"duration\": \"0\", \"punishment\": null}", "{\"ruleId\": \"\", \"toggle\": false, \"duration\": \"0\", \"punishment\": null}"])
  autoModSpamTriggers       Json[]       @default(["{ \"amount\": 5, \"within\": 5 }", "{ \"amount\": 10, \"within\": 20 }"])
  escalationsAutoMod        Json[]
  escalationsManual         Json[]
  lockChannels              String[]
  lockOverrides             BigInt       @default(377957124160) // SendMessages + CreatePublicThreads + CreatePrivateThreads + SendMessagesInThreads + AddReactions
  prefix                    String       @default("-")
  messageCommandsEnabled    Boolean      @default(true)
  respondNoPermission       Boolean      @default(true)
  ticketsEnabled            Boolean      @default(false)
  ticketLogWebhookId        String?
  ticketLocation            String?
  allowUserCloseTicket      Boolean      @default(false)
  pingRoleOnTicketCreation  String?
  ticketAutoModeration      Boolean      @default(false)
  ticketModeratorRoles      String[]
  ticketBlacklist           String[]
  infractions               Infraction[]
  appeals                   Appeal[]
  tasks                     Task[]
  locks                     Lock[]
  tags                      Tag[]
  shortcuts                 Shortcut[]
  chatlogs                  Chatlog[]
  tickets                   Ticket[]
}

model Infraction {
  id          Int            @id @default(autoincrement())
  userId      String
  guildId     String
  type        InfractionType @default(Warn)
  date        BigInt
  expires     BigInt?
  reason      String         @default("Unspecified reason.")
  moderatorId String         @default("833792285120528394")
  appeal      Appeal?
  guild       Guild          @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Task {
  id      Int            @id @default(autoincrement()) @map("_id")
  userId  String
  guildId String
  type    InfractionType
  expires BigInt
  guild   Guild          @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([userId, guildId, type])
}

model Appeal {
  id         Int         @id
  userId     String
  guildId    String
  response   Json[]
  date       BigInt
  infraction Infraction? @relation(fields: [id], references: [id], onDelete: Cascade)
  guild      Guild       @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Lock {
  channelId String @id
  guildId   String
  allow     BigInt
  guild     Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Tag {
  guildId String
  name    String
  content String
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, name])
}

model Shortcut {
  guildId     String
  id          String
  name        String
  description String
  punishment  InfractionType
  reason      String
  duration    BigInt?
  deleteTime  Int?
  guild       Guild          @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, name])
}

model Blacklist {
  id     String @id
  reason String
}

model Chatlog {
  keyHash Bytes  @id
  iv      Bytes
  authTag Bytes
  html    Bytes
  guildId String
  expires BigInt
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Ticket {
  channelId String  @id
  title     String
  creatorId String
  invite    String? @unique
  guildId   String
  guild     Guild   @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, creatorId])
}